from logging import *
from _typeshed import Incomplete
from logging import critical as critical, debug as debug, error as error, info as info, warning as warning
from pymel.util.decoration import decorator as decorator

PYMEL_CONF_ENV_VAR: str
PYMEL_LOGLEVEL_ENV_VAR: str
PYMEL_ERRORLEVEL_ENV_VAR: str

def getConfigFile(): ...
def getLogConfigFile(): ...
def pymelLogFileConfig(fname, defaults: Incomplete | None = ..., disable_existing_loggers: bool = ...) -> None: ...

rootLogger: Incomplete
pymelLogger: Incomplete

def environLogLevelOverride(logger) -> None: ...
def getLogger(name): ...

logLevels: Incomplete

def nameToLevel(name): ...
def levelToName(level): ...
def timed(level=...): ...

ERRORLEVEL: Incomplete
ERRORLEVEL_DEFAULT: Incomplete

def errorLevel(): ...
def raiseLog(logger, level, message, errorClass=..., reraise: bool = ...) -> None: ...
def addErrorLog(logger): ...
