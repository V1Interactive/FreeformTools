<!--Freeform Rigging and Animation Tools
Copyright (C) 2020  Micah Zahm

Freeform Rigging and Animation Tools is free software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License as published 
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Freeform Rigging and Animation Tools is distributed in the hope that it will 
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Freeform Rigging and Animation Tools.  
If not, see <https://www.gnu.org/licenses/>.-->

    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:HelixResources.Style"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <BitmapImage x:Key="v1Background" UriSource="../../Resources/v1_background.png" />
    <SolidColorBrush x:Key="BackgroundColor" Color="#202628"/>
    <SolidColorBrush x:Key="SecondaryBackgroundColor" Color="#2e363c"/>
    <SolidColorBrush x:Key="HighlightColor" Color="#dfb266"/>
    <SolidColorBrush x:Key="SubHighlightColor" Color="#ba9655"/>
    <SolidColorBrush x:Key="PressedColor" Color="#dfb266"/>
    <SolidColorBrush x:Key="LightTextColor" Color="#feffff"/>
    <SolidColorBrush x:Key="DarkTextColor" Color="#2b1d16"/>
    <SolidColorBrush x:Key="DisabledTextColor" Color="#6d686f"/>
    <SolidColorBrush x:Key="ErrorColor" Color="#cc0000"/>
    <SolidColorBrush x:Key="AlternatingLineLight" Color="#3d484f"/>
    <SolidColorBrush x:Key="AlternatingLineMedium" Color="#2e363c"/>
    <SolidColorBrush x:Key="AlternatingLineDark" Color="#202628"/>


    <sys:Double x:Key="TitleTextSize">20</sys:Double>
    <sys:Double x:Key="{x:Static SystemParameters.VerticalScrollBarWidthKey}">10</sys:Double>
    <sys:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarHeightKey}">10</sys:Double>
    


    <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="btnBorder"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="2">
            <ContentPresenter x:Name="btnPresenter" 
                                HorizontalAlignment="Center" 
                                VerticalAlignment="Center" 
                                TextElement.Foreground="{TemplateBinding TextElement.Foreground}" 
                                TextElement.FontWeight="Medium"/>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="btnBorder" Value="{StaticResource HighlightColor}"/>
                <Setter Property="TextElement.Foreground" TargetName="btnBorder" Value="{StaticResource LightTextColor}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="btnBorder" Value="{StaticResource PressedColor}"/>
                <Setter Property="BorderBrush" TargetName="btnBorder" Value="{StaticResource PressedColor}"/>
                <Setter Property="TextElement.Foreground" TargetName="btnPresenter" Value="{StaticResource DarkTextColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="btnBorder" Value="0.25"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="TrimButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="btnBorder"
                Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="2"
                CornerRadius="0,12,0,12">
            <ContentPresenter x:Name="btnPresenter" 
                                HorizontalAlignment="Center" 
                                VerticalAlignment="Center" 
                                TextElement.Foreground="{TemplateBinding TextElement.Foreground}" 
                                TextElement.FontWeight="Medium"/>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" TargetName="btnBorder" Value="{StaticResource HighlightColor}"/>
                <Setter Property="TextElement.Foreground" TargetName="btnBorder" Value="{StaticResource LightTextColor}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="btnBorder" Value="{StaticResource PressedColor}"/>
                <Setter Property="BorderBrush" TargetName="btnBorder" Value="{StaticResource PressedColor}"/>
                <Setter Property="TextElement.Foreground" TargetName="btnPresenter" Value="{StaticResource DarkTextColor}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" TargetName="btnBorder" Value="0.25"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style TargetType="{x:Type local:V1TreeView}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource LightTextColor}"/>
        <!--<Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Name="img" Width="20" Height="20" Stretch="Fill" Source="Images/diskdrive.png"/>
                        <TextBlock Text="{Binding Name}" Margin="5,0" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>


    <Style TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template" Value="{StaticResource ButtonTemplate}"/>
    </Style>

    <Style x:Key="TrimButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template" Value="{StaticResource TrimButtonTemplate}"/>
    </Style>


    <Style x:Key="ForegroundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style x:Key="SelectedForegroundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ForegroundButton}">
        <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}"/>
    </Style>

    <Style x:Key="TrimForegroundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ForegroundButton}">
        <Setter Property="Template" Value="{StaticResource TrimButtonTemplate}"/>
    </Style>

    <Style x:Key="SelectedTrimForegroundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource TrimForegroundButton}">
        <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}"/>
    </Style>

    <Style x:Key="ErorrTrimForegroundButton" TargetType="{x:Type Button}" BasedOn="{StaticResource TrimForegroundButton}">
        <Setter Property="BorderBrush" Value="{StaticResource ErrorColor}"/>
    </Style>

    <Style x:Key="HighlightTrimButton" TargetType="{x:Type Button}" BasedOn="{StaticResource TrimButton}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource HighlightColor}"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>

    <Style TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style x:Key="V1Border" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style x:Key="SelectedBorder" TargetType="{x:Type Border}" BasedOn="{StaticResource V1Border}">
        <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style x:Key="ErrorBorder" TargetType="{x:Type Border}" BasedOn="{StaticResource V1Border}">
        <Setter Property="BorderBrush" Value="{StaticResource ErrorColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
    </Style>

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style x:Key="LightSeparator" TargetType="{x:Type Separator}" BasedOn="{StaticResource Separator}">
        <Setter Property="Background" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightTextColor}"/>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{StaticResource HighlightColor}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style x:Key="SubExpander" TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Background" Value="{StaticResource SubHighlightColor}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledTextColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LightTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
    </Style>

    <Style x:Key="HighlightTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource HighlightColor}"/>
    </Style>

    <Style x:Key="TitleTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource HighlightColor}"/>
        <Setter Property="TextBlock.FontSize" Value="{StaticResource TitleTextSize}"/>
        <Setter Property="TextBlock.FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="ErrorTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource ErrorColor}"/>
    </Style>

    <Style x:Key="DarkTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style x:Key="HeaderTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Background" Value="{StaticResource HighlightColor}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource LightTextColor}"/>
    </Style>

    <Style x:Key="ForegroundTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Foreground" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource LightTextColor}"/>
    </Style>

    <Style x:Key="HighlightTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource HighlightColor}"/>
    </Style>

    <Style x:Key="TextBoxNoScrollViewer" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border CornerRadius="2" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <AdornerDecorator x:Name="PART_ContentHost" Focusable="False"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
    </Style>

    <Style x:Key="V1CheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
    </Style>
    

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style x:Key="SubScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type ItemsControl}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Style.Resources>
            <Style TargetType="Grid">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=(ItemsControl.AlternationIndex)}" Value="0">
                        <Setter Property="Background" Value="Red"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}, Path=(ItemsControl.AlternationIndex)}" Value="1">
                        <Setter Property="Background" Value="Blue"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <!--Used to dynamically switch between standard style and another grid style-->
    <Style x:Key="V1ItemsControl" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
    </Style>

    <Style x:Key="SelectedItemsControl" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
        <Setter Property="Background" Value="{StaticResource HighlightColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}"/>
    </Style>

    <Style x:Key="ForegroundItemsControl" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" 
                                Margin="0,0,-4,0" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{StaticResource  HighlightColor}" 
                                BorderThickness="2" 
                                CornerRadius="0,12,0,0">
                            <ContentPresenter x:Name="ContentSite" 
                                              VerticalAlignment="Center" 
                                              HorizontalAlignment="Center"
                                              ContentSource="Header" 
                                              Margin="12,2,12,2" 
                                              RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightColor}" />
                            <Setter Property="Foreground" Value="{StaticResource DarkTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource LightTextColor}"/>
    </Style>

    <!--Used to dynamically switch between standard style and another grid style-->
    <Style x:Key="V1Grid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
    </Style>

    <Style x:Key="SubGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style x:Key="DisabledGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource  DisabledTextColor}"/>
    </Style>

    <Style x:Key="SelectedGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="Background" Value="{StaticResource HighlightColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource DarkTextColor}"/>
    </Style>

    <Style x:Key="ErrorGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource ErrorColor}"/>
    </Style>

    <Style x:Key="SelectedErrorGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="Background" Value="{StaticResource HighlightColor}"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource ErrorColor}"/>
    </Style>

    <Style x:Key="TransparentGrid" TargetType="{x:Type Grid}" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
        
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{TemplateBinding BorderBrush}" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="V1ContextMenu" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
    </Style>

    <Style x:Key="SubMenu" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{StaticResource SecondaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource LightTextColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource HighlightColor}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="V1MenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
    </Style>

    <Style x:Key="SubMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="BorderBrush" Value="{StaticResource SecondaryBackgroundColor}"/>
    </Style>
</ResourceDictionary>